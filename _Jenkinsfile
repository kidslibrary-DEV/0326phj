#!groovy
def defaultUnityAppVersion = "2019.1.4f1"
def defaultUnityCICDScriptsVersion = "heads/master"
def buildAssetBundlesExecutesMethod = "CICD.AssetBundlesBuilder.CommandLineBuild"
def PackageBuilderExecutesMethod = "CICD.PackageBuilder.CommandLineBuild"
def BookConfigApiUpdaterExecutesMethod = "CICD.BookConfigApiUpdater.CommandLineBuild"
def RefreshAssetsExecutesMethod = "CICD.AssetReimporter.CommandLineBuild"
properties([parameters([
        string(name: 'build_only_books', defaultValue: '', description: "List of book id ',' separated to build. Empty value build all books"),
        string(name: 'unity_ci_and_cd_scripts_version', defaultValue: defaultUnityCICDScriptsVersion, description: "Unity CI&CD Scripts version, tag from \"https://github.com/InceptionXR/Unity-CI-CD-Scripts\" repository"),
        booleanParam(name: 'build_ios', defaultValue: true, description: "Build iOS platform"),
        booleanParam(name: 'build_android', defaultValue: true, description: "Build Android platform"),
        booleanParam(name: 'run_tests', defaultValue: false, description: "Run tests"),
		booleanParam(name: 'reimport', defaultValue: false, description: "Reimport Unity Assets"),
        booleanParam(name: 'use_pv', defaultValue: false, description: "Use persistence volume caching"),
        string(name: 'unity_app_version', defaultValue: defaultUnityAppVersion, description: "Unity App Version"),
        string(name: 'logLevel', defaultValue: "info", description: "Logs level"),
])])
def UnityAppVersion = params.unity_app_version
def UnityCICDScriptsVersion = params.unity_ci_and_cd_scripts_version
def platformsToBuild = unityUtil.getPlatformsToBuild();
def books = []
def bookApiVersion
for (platform in platformsToBuild) {
    def label = bookK8sTemplates.id(platform)
    bookK8sTemplates.createPersistentVolumeClaim(label)
    def yaml = bookK8sTemplates.unityPodTemplate(UnityAppVersion, label)
    podTemplate(cloud: 'Bookful Stage', label: label, showRawYaml: log.isDebug(), yaml: yaml) {
        node(label) {
            ws("ws") {
                stage('checkout scm') {
                    vcs.checkoutRepo(20)
                    vcs.checkoutUnityCICDScriptsRepo(UnityCICDScriptsVersion)
                }
                stage('initialize(node)') {
                    def buildOnlyBooks = (params.build_only_books.length() > 0 ? params.build_only_books.split(",") : []) as String[]
                    books = bookUtil.booksToBuild(buildOnlyBooks)
                    bookApiVersion = bookUtil.getBookApiVersion()
                    cmd.exe("git clean -df")
                    dir("Build") {
                        deleteDir()
                    }
                    dir("AssetBundles") {
                        deleteDir()
                    }
                    if (params.use_pv) {
                        container('unity') {
                            cmd.exe("ln -s /pv_cache Library")
                        }
                    }
                    unityUtil.activateLicence(UnityAppVersion)
                }
                def buildId = "${BUILD_NUMBER}_${new Date().getTime()}"
                def unityArgs = ""
                unityArgs += " -projectPath ${WORKSPACE}"
                unityArgs += " -buildTarget ${platform}"
                unityArgs += " -buildId=${buildId}"
				if (params.reimport) {
					stage("reimporting assets \"${platform}\"") {
						string command = "-quit -batchmode"
						command += " -executeMethod ${RefreshAssetsExecutesMethod}"
						command += unityArgs
						unityUtil.exe(command, "Reimporting assets")
					}
				}
                stage("init \"${platform}\"") {
                    string command = "-quit -batchmode"
                    command += unityArgs
                    unityUtil.exe(command, "Init")
                }
                if (params.run_tests) {
                    stage("\"${platform}\" tests") {
                        try {
                            string command = "-batchmode"
                            command += " -runEditorTests"
                            command += " -testResults ${WORKSPACE}/Logs/test_report.xml"
                            command += unityArgs
                            unityUtil.exe(command, "Tests")
                            nunit testResultsPattern: 'Logs/test_report.xml'
                        } catch (Exception e) {
                            if (e.getMessage() == "script returned exit code 2") {
                                nunit testResultsPattern: 'Logs/test_report.xml'
                                error("Tests failed!")
                            } else {
                                throw e
                            }
                        }
                    }
                }
                for (book in books) {
                    def gsRelativePath = "bookful/book/${book.id}/${buildId}"
                    def unityBookArgs = unityArgs
                    unityBookArgs += " -bookId=${book.id}"
                    unityBookArgs += " -httpRelativePath=https://storage.googleapis.com/${gsRelativePath}/${platform}/"
                    unityBookArgs += " -BSUAssetsRootFolderPath=${book.BSUAssetsRootFolderPath}"
                    unityBookArgs += " -bookApiVersion=${bookApiVersion}"
                    unityBookArgs += " -GamesAssetsRootFolderPath=${book.GamesAssetsRootFolderPath}"
                    stage("\"${platform}\":\"${book.id}\" building asset bundles") {
                        string command = "-quit -batchmode"
                        command += " -executeMethod ${buildAssetBundlesExecutesMethod} -outputPath=${WORKSPACE}/AssetBundles/${platform}"
                        command += unityBookArgs
                        unityUtil.exe(command, "AssetBundles")
                    }
                    stage("\"${platform}\":\"${book.id}\" building package") {
                        string command = "-quit -batchmode"
                        command += " -executeMethod ${PackageBuilderExecutesMethod}"
                        command += unityBookArgs
                        unityUtil.exe(command, "BuildingPackage")
                    }
                    stage("\"${platform}\":\"${book.id}\" uploading package") {
                        def pathPrefix = isUnix() ? "Build" : "${WORKSPACE}/Build/".substring(1)
                        googleStorageUpload bucket: "gs://${gsRelativePath}", credentialsId: 'bookful', pattern: "Build/${platform}/**/*", pathPrefix: "${pathPrefix}"
                    }
                    stage("\"${platform}\":\"${book.id}\" updating Book API service") {
                        withCredentials([string(credentialsId: 'BookfulApiServiceAccessToken', variable: 'BookfulApiServiceAccessToken')]) {
                            string command = "-quit -batchmode"
                            command += " -executeMethod ${BookConfigApiUpdaterExecutesMethod}"
                            command += " -BookfulApiServiceAccessToken=${BookfulApiServiceAccessToken}"
                            command += unityBookArgs
                            unityUtil.exe(command, "UpdatingBookAPIService")
                        }
                    }
                }
            }
        }
    }
}
